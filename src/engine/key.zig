const c = @import("c.zig").c;

pub const Key = enum(i32) {
    Space = c.GLFW_KEY_SPACE, // 32
    Apostraphe = c.GLFW_KEY_APOSTROPHE, // 39 /* ' */
    Comma = c.GLFW_KEY_COMMA, // 44 /* , */
    Minus = c.GLFW_KEY_MINUS, // 45 /* - */
    Period = c.GLFW_KEY_PERIOD, // 46 /* . */
    Slash = c.GLFW_KEY_SLASH, // 47 /* / */
    @"0" = c.GLFW_KEY_0, // 48
    @"1" = c.GLFW_KEY_1, // 49
    @"2" = c.GLFW_KEY_2, // 50
    @"3" = c.GLFW_KEY_3, // 51
    @"4" = c.GLFW_KEY_4, // 52
    @"5" = c.GLFW_KEY_5, // 53
    @"6" = c.GLFW_KEY_6, // 54
    @"7" = c.GLFW_KEY_7, // 55
    @"8" = c.GLFW_KEY_8, // 56
    @"9" = c.GLFW_KEY_9, // 57
    Semicolon = c.GLFW_KEY_SEMICOLON, // 59 /* ; */
    Equal = c.GLFW_KEY_EQUAL, // 61 /* = */
    A = c.GLFW_KEY_A, // 65
    B = c.GLFW_KEY_B, // 66
    C = c.GLFW_KEY_C, // 67
    D = c.GLFW_KEY_D, // 68
    E = c.GLFW_KEY_E, // 69
    F = c.GLFW_KEY_F, // 70
    G = c.GLFW_KEY_G, // 71
    H = c.GLFW_KEY_H, // 72
    I = c.GLFW_KEY_I, // 73
    J = c.GLFW_KEY_J, // 74
    K = c.GLFW_KEY_K, // 75
    L = c.GLFW_KEY_L, // 76
    M = c.GLFW_KEY_M, // 77
    N = c.GLFW_KEY_N, // 78
    O = c.GLFW_KEY_O, // 79
    P = c.GLFW_KEY_P, // 80
    Q = c.GLFW_KEY_Q, // 81
    R = c.GLFW_KEY_R, // 82
    S = c.GLFW_KEY_S, // 83
    T = c.GLFW_KEY_T, // 84
    U = c.GLFW_KEY_U, // 85
    V = c.GLFW_KEY_V, // 86
    W = c.GLFW_KEY_W, // 87
    X = c.GLFW_KEY_X, // 88
    Y = c.GLFW_KEY_Y, // 89
    Z = c.GLFW_KEY_Z, // 90
    LeftBracket = c.GLFW_KEY_LEFT_BRACKET, // 91 /* [ */
    BackSlash = c.GLFW_KEY_BACKSLASH, // 92 /* \ */
    RightBracket = c.GLFW_KEY_RIGHT_BRACKET, // 93 /* ] */
    GraveAccent = c.GLFW_KEY_GRAVE_ACCENT, // 96 /* ` */
    World1 = c.GLFW_KEY_WORLD_1, // 161 /* non-US #1 */
    World2 = c.GLFW_KEY_WORLD_2, // 162 /* non-US #2 */
    Esc = c.GLFW_KEY_ESCAPE, // 256
    Enter = c.GLFW_KEY_ENTER, // 257
    Tab = c.GLFW_KEY_TAB, // 258
    Backspace = c.GLFW_KEY_BACKSPACE, // 259
    Insert = c.GLFW_KEY_INSERT, // 260
    Delete = c.GLFW_KEY_DELETE, // 261
    Right = c.GLFW_KEY_RIGHT, // 262
    Left = c.GLFW_KEY_LEFT, // 263
    Down = c.GLFW_KEY_DOWN, // 264
    Up = c.GLFW_KEY_UP, // 265
    PageUp = c.GLFW_KEY_PAGE_UP, // 266
    PageDown = c.GLFW_KEY_PAGE_DOWN, // 267
    Home = c.GLFW_KEY_HOME, // 268
    End = c.GLFW_KEY_END, // 269
    CapsLock = c.GLFW_KEY_CAPS_LOCK, // 280
    ScrollLock = c.GLFW_KEY_SCROLL_LOCK, // 281
    NumLock = c.GLFW_KEY_NUM_LOCK, // 282
    PrintScreen = c.GLFW_KEY_PRINT_SCREEN, // 283
    Pause = c.GLFW_KEY_PAUSE, // 284
    F1 = c.GLFW_KEY_F1, // 290
    F2 = c.GLFW_KEY_F2, // 291
    F3 = c.GLFW_KEY_F3, // 292
    F4 = c.GLFW_KEY_F4, // 293
    F5 = c.GLFW_KEY_F5, // 294
    F6 = c.GLFW_KEY_F6, // 295
    F7 = c.GLFW_KEY_F7, // 296
    F8 = c.GLFW_KEY_F8, // 297
    F9 = c.GLFW_KEY_F9, // 298
    F10 = c.GLFW_KEY_F10, // 299
    F11 = c.GLFW_KEY_F11, // 300
    F12 = c.GLFW_KEY_F12, // 301
    F13 = c.GLFW_KEY_F13, // 302
    F14 = c.GLFW_KEY_F14, // 303
    F15 = c.GLFW_KEY_F15, // 304
    F16 = c.GLFW_KEY_F16, // 305
    F17 = c.GLFW_KEY_F17, // 306
    F18 = c.GLFW_KEY_F18, // 307
    F19 = c.GLFW_KEY_F19, // 308
    F20 = c.GLFW_KEY_F20, // 309
    F21 = c.GLFW_KEY_F21, // 310
    F22 = c.GLFW_KEY_F22, // 311
    F23 = c.GLFW_KEY_F23, // 312
    F24 = c.GLFW_KEY_F24, // 313
    F25 = c.GLFW_KEY_F25, // 314
    KP0 = c.GLFW_KEY_KP_0, // 320
    KP1 = c.GLFW_KEY_KP_1, // 321
    KP2 = c.GLFW_KEY_KP_2, // 322
    KP3 = c.GLFW_KEY_KP_3, // 323
    KP4 = c.GLFW_KEY_KP_4, // 324
    KP5 = c.GLFW_KEY_KP_5, // 325
    KP6 = c.GLFW_KEY_KP_6, // 326
    KP7 = c.GLFW_KEY_KP_7, // 327
    KP8 = c.GLFW_KEY_KP_8, // 328
    KP9 = c.GLFW_KEY_KP_9, // 329
    KPDecimal = c.GLFW_KEY_KP_DECIMAL, // 330
    KPDivide = c.GLFW_KEY_KP_DIVIDE, // 331
    KPMultiply = c.GLFW_KEY_KP_MULTIPLY, // 332
    KPSubtract = c.GLFW_KEY_KP_SUBTRACT, // 333
    KPAdd = c.GLFW_KEY_KP_ADD, // 334
    KPEnter = c.GLFW_KEY_KP_ENTER, // 335
    KPEqual = c.GLFW_KEY_KP_EQUAL, // 336
    LeftShift = c.GLFW_KEY_LEFT_SHIFT, // 340
    LeftControl = c.GLFW_KEY_LEFT_CONTROL, // 341
    LeftAlt = c.GLFW_KEY_LEFT_ALT, // 342
    LeftSuper = c.GLFW_KEY_LEFT_SUPER, // 343
    RightShift = c.GLFW_KEY_RIGHT_SHIFT, // 344
    RightControl = c.GLFW_KEY_RIGHT_CONTROL, // 345
    RightAlt = c.GLFW_KEY_RIGHT_ALT, // 346
    RightSuper = c.GLFW_KEY_RIGHT_SUPER, // 347
    Menu = c.GLFW_KEY_MENU, // 348
    // Last = c.GLFW_KEY_LAST, //   GLFW_KEY_MENU

    pub inline fn toCInt(self: Key) c_int {
        return @as(c_int, @intFromEnum(self));
    }
};
